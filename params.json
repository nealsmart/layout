{"name":"Layout","tagline":"","body":"# Flow Map Layout Generation for Counter-Strike\r\n\r\n### Introduction \r\nIdeal map layout depends greatly on the gameplay logic of each game, meaning that each game requires a unique approach to development of levels. Creation of these levels is a time consuming process, one which isn't guaranteed to end with an ideal map. The purpose of this project is to initially aid in the development of levels by providing a good flow map to base the map on, then eventually be able to generate entire levels from scratch.\r\n\r\n### Problem\r\nThe system is, in essence, a combinatoric problem solver. By representing a level as a node graph, the system can generate and then analyze the performance of the map according to the many aspects of level design theory for Counter-Strike.\r\n\r\nTwo teams, terrorists and counter-terrorists spawn in a map. The counter-terrorists move to secure two bombsites located within the map. The terrorists fight to gain control of one of these bombsites to plant a bomb. When the bomb is planted, remaining counter-terrorists move to take back the site and defuse the bomb.\r\n\r\n![alt](http://i.imgur.com/uNcr0Qu.png)\r\n\r\n### Significance\r\nThe community of Counter-Strike is growing every day, peaking at over 600,000 concurrent players within the past week. The current map pool only consists of seven competitive maps and eight secondary maps. Twice a year, seven new maps by community members are temporarily added as a third pool of maps to choose from.\r\n\r\nFor frequent players, the map pool can get quite repetitive. By providing a solid framework to design a map around, and eventually a complete graybox map, players hungry for new gameplay experiences can play upon these, and designers can adopt these levels to fine-tune with playtesting and artpass them for release.\r\n\r\n### Project Details\r\n    +The code accepts a list of indegrees to build a random graph. Each edge is given a random weight.\r\n    +Two nodes on opposite ends of the graph are chosen as spawn points for each team.\r\n    +Which team reaches what node first and at what time is calculated.\r\n    +Useless routes are pruned from the graph.\r\n    +Two bombsites within as reasonable distance as possible are chosen within the nodes CT reaches first.\r\n    +Based on these bombsites, the edges and nodes that are ideal to set up defense are determined.\r\n    +Soon: A basic game simulator to predict win rates for either team.\r\n\r\n### Using the System\r\n[Example](https://github.com/nealsmart/layout/blob/gh-pages/flowMapLayout.ipynb)\r\n\r\n![alt](http://i.imgur.com/mYqWi78.png)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}